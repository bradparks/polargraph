#!/usr/bin/perl
# Convert a PDF file into a list of vectors.
use warnings;
use strict;
use IPC::Open2;
use Data::Dumper;
use File::Temp 'tempfile';

my $file = shift || '-';
my $dpi = 600;
my $scale = 25.4 / $dpi;

# Postscript code to extract numbers
my $ps_code = <<EOF;
	% Ensure nice smooth curves
	1 setflat
	
	% Print a number
	/puts {
		(        ) cvs print
	} def
	/putln {=} def

	% Extract the solid R, G or B vectors
	/stroke {
		%  check for solid red
		currentrgbcolor 
		0.0 eq 
		exch 0.0 eq 
		and 
		exch 1.0 eq 
		and 
		%  check for solid blue
		currentrgbcolor 
		0.0 eq 
		exch 1.0 eq 
		and 
		exch 0.0 eq 
		and 
		or 
		%  check for solid blue
		currentrgbcolor 
		1.0 eq 
		exch 0.0 eq 
		and 
		exch 0.0 eq 
		and 
		or 
		{
			%  solid red, green or blue
			(P ) puts 
			currentrgbcolor 
			( ) puts 
			100 mul round cvi puts 
			( ) puts 
			100 mul round cvi puts 
			( ) puts 
			100 mul round cvi putln 

			% convert the curve to a series of points
			% with moveto, lineto and closepath commands
			flattenpath 
			{ 
				%  moveto
				(M ) puts 
				transform
				round cvi puts 
				( ) puts 
				round cvi putln
			}{
				%  lineto
				(L ) puts 
				transform
				round cvi puts 
				( ) puts 
				round cvi putln
			}{
				%  curveto (not implemented)
			}{
				%  closepath
				(Z) putln
			}
			pathforall newpath
		}
		{
			%  Default is to just stroke
			stroke
		}
		ifelse
	}bind def
	%/showpage {(X)= showpage}bind def
EOF


# Convert the file to postscript
my $ps = `pdf2ps "$file" -`
	or die "$file: Unable to convert to Postscript\n";

# inject the vector code into the Postscript file
$ps =~ s/^(%!.*?)$/$1\n$ps_code/ms
	or die "$file: Postscript preamble missing?\n";

my ($fh,$psfile) = tempfile()
	or die "unable to create tempfile: $!\n";
print $fh $ps;
close $fh;

# Process the Postscript to generate the vectors
open VECTORS, "gs \\
	-q \\
	-dBATCH \\
	-dNOPAUSE \\
	-r$dpi \\
	-sDEVICE=bbox \\
	-sOutputFile=/dev/null \\
	$psfile |
" or die "ghostscript: failed to open: $!\n";

while(<VECTORS>)
{
	# convert M and L positions from pixels to positions
	if(/^([ML])\s*(\d+)\s+(\d+)$/)
	{
		printf "%s %.3f %.3f\n", $1, $2*$scale, $3*$scale;
		next;
	}

	print;
}

__END__
