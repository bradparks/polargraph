#!/usr/bin/perl
# Convert a PDF file into a list of vectors.
use warnings;
use strict;
use IPC::Open2;
use Data::Dumper;

my $file = shift;
my $dpi = 600;
my $scale = 25.4 / $dpi;

# Postscript code to extract numbers
my $ps_code = <<EOF;
	% Ensure nice smooth curves
	1 setflat
	
	% Print a number
	/puts {
		(        ) cvs print
	} def
	/putln {=} def

	% Extract the solid R, G or B vectors
	/stroke {
		%  check for solid red
		currentrgbcolor 
		0.0 eq 
		exch 0.0 eq 
		and 
		exch 1.0 eq 
		and 
		%  check for solid blue
		currentrgbcolor 
		0.0 eq 
		exch 1.0 eq 
		and 
		exch 0.0 eq 
		and 
		or 
		%  check for solid blue
		currentrgbcolor 
		1.0 eq 
		exch 0.0 eq 
		and 
		exch 0.0 eq 
		and 
		or 
		{
			%  solid red, green or blue
			(P ) puts 
			currentrgbcolor 
			( ) puts 
			100 mul round cvi puts 
			( ) puts 
			100 mul round cvi puts 
			( ) puts 
			100 mul round cvi putln 

			% convert the curve to a series of points
			% with moveto, lineto and closepath commands
			flattenpath 
			{ 
				%  moveto
				(M ) puts 
				transform
				round cvi puts 
				( ) puts 
				round cvi putln
			}{
				%  lineto
				(L ) puts 
				transform
				round cvi puts 
				( ) puts 
				round cvi putln
			}{
				%  curveto (not implemented)
			}{
				%  closepath
				(Z) putln
			}
			pathforall newpath
		}
		{
			%  Default is to just stroke
			stroke
		}
		ifelse
	}bind def
	%/showpage {(X)= showpage}bind def
EOF


# Convert the file to postscript
my $ps = `pdf2ps "$file" -`
	or die "$file: Unable to convert to Postscript\n";

# inject the vector code into the Postscript file
$ps =~ s/^(%!.*?)$/$1\n$ps_code/ms
	or die "$file: Postscript preamble missing?\n";

#open OUT, ">/tmp/test.ps";
#print OUT $ps;
#close OUT;

# Process the Postscript to generate the vectors
my $pid = open2(
	\*VECTORS, # output from GS
	\*POSTSCRIPT, # postscript to GS
	"gs",
	"-q",
	"-dBATCH",
	"-dNOPAUSE",
	"-r$dpi",
	"-sDEVICE=bbox",
	"-sOutputFile=/dev/null",
	"-",
) or die "ghostscript: failed to open: $!\n";

print POSTSCRIPT $ps;
close POSTSCRIPT;

while(<VECTORS>)
{
	# convert M and L positions from pixels to positions
	if(/^([ML])\s*(\d+)\s+(\d+)$/)
	{
		printf "%s %.3f %.3f\n", $1, $2*$scale, $3*$scale;
		next;
	}

	print;
}

__END__

my $color = 0;
my @vectors;
my $vector = [];

while(<VECTORS>)
{
	#print;
	chomp;
	if(/^P,(\d+),(\d+),(\d+)$/)
	{
		if (@$vector > 1)
		{
			# store the one we've been building if we have
			# more than one point
			push @{$vectors[$color] ||= []}, $vector;
			$vector = [];
		}

		# sort them into red/green/blue bins
		$color = $1 == 100 ? 0 : $2 == 100 ? 1 : $3 == 100 ? 2 : 3;
		next;
	}

	if(/^M(\d+),(\d+)$/)
	{
		if (@$vector > 1)
		{
			# store the one we've been building
			push @{$vectors[$color] ||= []}, $vector;
		}

		$vector = [[$1*$scale,$2*$scale]];
		next;
	}

	# Add a new line segment to our current vector
	if(/^L(\d+),(\d+)$/)
	{
		push @$vector, [$1*$scale,$2*$scale];
		next;
	}

	# Close the loop
	if(/^C/)
	{
		if (@$vector > 1)
		{
			push @$vector, $vector->[0];
			push @{$vectors[$color] ||= []}, $vector;
		}

		$vector = [];
		next;
	}

	warn "parse error: '$_'\n";
}

#print Dumper(\@vectors);

for my $vectors (@vectors)
{
	next unless $vectors;

	for my $pts (@$vectors)
	{
		for my $pt (@$pts)
		{
			printf "%.3f,%.3f ", $pt->[0], $pt->[1];
		}

		print "\n";
	}

	print "\n";
}

__END__
